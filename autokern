#!/bin/sh
### Getopts
while getopts ":hvlwk:" option; do
   case $option in
      h) # display help
	       	cd "$(dirname "$0")" || return
	       	man autokern || man -l autokern.man || groff -mandoc autokern.man -T utf8 | less
         exit 0;;
      l) # Latest
		KERNVER="$(curl https://www.kernel.org/ | grep -A 1 latest_link | grep -o -P '(?<=.tar.xz">).*(?=</a>)')";;
      v) # Verbose
	    	AUTOKERNVERB=v;;
      w) # Wget
		DLCOM="wget -v"
		export DLCOM;;
      k) #KERNVER spec
	        KERNVER=$OPTARG
		export KERNVER;;
     \?) # Invalid option
     		echo "Error: Invalid option, for more information run 'autokern -h'"
        	exit;;
   esac
done

### Initialise vars
type tar gcc make ld depmod perl bc openssl grub-mkconfig mkinitcpio >> /dev/null || { echo "The required programs are not installed, for more information, run 'autokern -h'"; exit; }
[ -z "$KERNDIR" ] && KERNDIR="$HOME"/.cache/autokern && export KERNDIR
[ -z "$AUTOKERNCONF" ] && AUTOKERNCONF="$HOME"/.config/autokern && export AUTOKERNCONF
mkdir -p "$KERNDIR"
mkdir -p "$AUTOKERNCONF"
[ ! -f "$AUTOKERNCONF"/config ] && cd "$(dirname "$0")" && cp config.example "$AUTOKERNCONF"/config && . "$AUTOKERNCONF"/config || return
[ -z "$DLCOM" ] && DLCOM="curl -LO" && export DLCOM
[ -z "$COMPTHREADS" ] && COMPTHREADS="$(nproc)" && export COMPTHREADS
cd "$KERNDIR" || return
[ -z "$KERNVER" ] && read -p "Enter a kernel version: " KERNVER
[ -z "$KERNVER" ] && KERNVER=$(curl https://www.kernel.org/ | grep -A 1 latest_link | grep -o -P '(?<=.tar.xz">).*(?=</a>)')
export KERNVER
KERNPREFIX="$(echo "$KERNVER" | cut -c1)"
export KERNPREFIX
[ -z "$KERNSUFFIX" ] && KERNSUFFIX=1
while [ -f /boot/vmlinuz-linux_"$KERNVER"_"$KERNSUFFIX" ];
do
	export KERNSUFFIX=$((KERNSUFFIX+1))
done
UNAMEM="$(uname -m)"
export UMAMEM
[ ! -z "$AUTOKERNVERB" ] && export AUTOKERNVERB="v"

### Get source code
dlSource()
(
	"$DLCOM" https://cdn.kernel.org/pub/linux/kernel/v"$KERNPREFIX".x/linux-"$KERNVER".tar.xz
)

## Verbose download
vdlSource()
(
	"$DLCOM"v https://cdn.kernel.org/pub/linux/kernel/v"$KERNPREFIX".x/linux-"$KERNVER".tar.xz
)

### Kernel confs
vkernConf()
(
	cp -v "$AUTOKERNCONF"/kernconf .config || procConf
	mv -f -v "$AUTOKERNCONF"/kernconf "$AUTOKERNCONF"/kernconf.old
	cp -v .config "$AUTOKERNCONF"/kernconf
)
kernConf()
(
	cp "$AUTOKERNCONF"/kernconf .config || procConf
	mv -f "$AUTOKERNCONF"/kernconf "$AUTOKERNCONF"/kernconf.old
	cp .config "$AUTOKERNCONF"/kernconf
)
procConf()
(
[ -f /proc/config.gz ] && zcat /proc/config.gz > .config || make localmodconfig
)

### Make
runMake()
(
	make -j"$COMPTHREADS"
	sudo make modules_install
)
## Verbose alternative make
vrunMake()
(
	make --debug=v -j"$COMPTHREADS"
	sudo make --debug=v -j"$COMPTHREADS" modules_install
)
### copy bzImage
bzImg()
(
	sudo cp arch/"$UNAMEM"/boot/bzImage /boot/vmlinuz-linux_"$KERNVER"_"$KERNSUFFIX"
)
## Verbose alternative copy bz
vbzImg()
(
	sudo cp -v arch/"$UNAMEM"/boot/bzImage /boot/vmlinuz-linux_"$KERNVER"_"$KERNSUFFIX"
)
### initramfs & systemmap
initMap()
(
	sudo mkinitcpio -k "$KERNVER" -g /boot/initramfs-linux_"$KERNVER"_"$KERNSUFFIX".img
	sudo cp System.map /boot/System.map-linux_"$KERNVER"_"$KERNSUFFIX"
)
## Verbose alternative initramfs & systemmap
vinitMap()
(
	sudo mkinitcpio -v -k "$KERNVER" -g /boot/initramfs-linux_"$KERNVER"_"$KERNSUFFIX".img
	sudo cp -v System.map /boot/System.map-linux_"$KERNVER"_"$KERNSUFFIX"
)

### Actually run the code
[ ! -f linux-"$KERNVER".tar.xz ] && "$AUTOKERNVERB"dlSource
tar -x"$AUTOKERNVERB"Jf linux-"$KERNVER".tar.xz || { echo "invalid kernel version"; exit 1; }
cd linux-"$KERNVER" || return
"$AUTOKERNVERB"kernConf
## Modify config
read -p "Would you like to modify the kernel config? [y/N] " response
case $response in [yY][eE][sS]|[yY]|[yY][eE])
	make menuconfig;;
esac
"$AUTOKERNVERB"runMake
"$AUTOKERNVERB"bzImg
"$AUTOKERNVERB"initMap
## Update bootloader
[ -f /boot/grub/grub.cfg ] && sudo grub-mkconfig -o /boot/grub/grub.cfg
exit;
